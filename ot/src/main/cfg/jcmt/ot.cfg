#
# This file specifies configuration information for the Observing Tool.
# Each observatory site that uses the Observing Tool will have its own
# unique configuration.  Configurable elements are specified by key/value
# pairs in the format:
#
#	key: value
#
# Some elements have more than one key/value pair.
#
# Site-specific classes should be stored in a package contained in the
# ot_gemini package.
#
# There are several configurable elements as described below:
#
#
# ---------------
# Guide Star Tags
# ---------------
#
#   This item specifies the tags that will be used for guide stars at
#   this observatory.  The "guide" key indicates this item.  There
#   should only be one guide key in the file, and its values should be
#   comma separated.
#
#   Example:
#		guide:		PWFS1, PWFS2, OIWFS
#
#   This observatory has PWFS1, PWFS2, and OIWFS guide stars.  These
#   choices will be available when the target list is defined and will
#   show up in the Position Editor.
#
#
# ------------------------------
# Position Editor Image Features
# ------------------------------
#
#   One or more add-on image features can be specified.  Each feature
#   specified will have its own toggle button on the Position Editor
#   window and this button will always be present regardless of the
#   context or selected item in the Program Hieararchy view.
#
#   Two keys specify an add-on image feature:
#
#   "tpe feature" - this is the fully qualified class name of the add-on
#   image feature.  The class that it indicates must be a subclass of
#   ot.tpe.TpeImageFeature.
#
#   "tpe type" - this should be one of "target", "instrument", or
#   "independent".  Target dependent features are disabled when there is
#   no target list in the current scope.  Instrument dependent features
#   are disabled when there is no instrument in the current scope, and
#   independent features are never disabled.
#
#   Example:
#		# Acquisition Camera
#		tpe feature:	ot_gemini.tpe.TpeAcqCameraFeature
#		tpe type:	independent
#
#   This example specifies a TpeImageFeature that displays the size of
#   the observatory's acquistion camera.  It is independent of context,
#   and so is available regardless of whether there is a target list or
#   an instrument.
#
#
# -------------
# Program Items
# -------------
#
# A set of observatory-specific program items may be specified.  Instruments
# and many iterators fall into this category.  There are three kinds of
# program items that may be configured.  These are listed below along with
# the base class that each must ultimately subclass:
#
#    1) instruments		gemini.sp.obsComp.SpInstObsComp
#    2) "observe" iterators	gemini.sp.iter.SpIterObserveBase
#    3) "normal" iterators	gemini.sp.iter.SpIterComp
#
# "Observe" iterators are leaves in the program hierarchy tree and are 
# operated upon by more complex iterators like the "Offset" iterator.  They
# specify a repeat (observe) count, and optionally an exposure time per
# observe, and coadd count.
#
# There are three keys that specify a program item.  Two are required and
# one is optional:
#
# "class" - the fully qualified class name.  As noted, the class must
# subclass one of the three base classes above depending upon whether it
# is an instrument, iterator, or observe iterator.
#
# "editor" - this is the fully qualified name of the editor for this item.
# It must subclass ot.editor.OtItemEditor.
#
# "img feature" - this tag is optional.  If present it must be the fully
# qualified name of a ot.tpe.TpeImageFeature subclass.  When the user has
# selected this item in the Program Hierarchy view, the associated image
# feature will be available in the Position Editor, if opened.
#
# Example:
#
#	# NIRI
#	class:		ot_gemini.inst.SpInstNIRI
#	editor:		ot_gemini.inst.editor.EdCompInstNIRI
#	img feature:	ot_gemini.inst.SpInstNIRI_OIWFS_Feature
#
# This example defines an instrument component because SpInstNIRI
# derives from gemini.sp.obsComp.SpInstObsComp (though this information
# isn't apparent from the key/value pairs themselves).  The editor used
# to configure this component is implemented in EdCompInstNIRI.  Finally
# there is an image feature that should be associated with this class.
# In this case, when the user has selected the NIRI component with the
# Position Editor open, s/he will be able to toggle the view of its on-
# instrument wave-front sensor range.
#

# Tags for the additional targets in the target list. (This is called "guide"
# because originally this facility was only for guide stars (Gemini/Ukirt)).
guide:		REFERENCE

# Name resolvers used in target list editor
name resolvers:	SIMBAD Names CADC, SIMBAD Names ESO, NED Names CADC, NED Names ESO

# DRRECIPE
class:		orac.jcmt.inst.SpDRRecipe
editor:		ot.jcmt.inst.editor.EdDRRecipe

# SITE QUALITY
class:		orac.jcmt.obsComp.SpSiteQualityObsComp
editor:		ot.jcmt.obsComp.editor.EdCompSiteQuality

# SCHEDULING CONSTRAINTS
class:		gemini.sp.obsComp.SpSchedConstObsComp
editor:		ot.editor.EdCompSchedConstraints

# Heterodyne
class:		orac.jcmt.inst.SpInstHeterodyne
editor:		ot.jcmt.inst.editor.EdCompInstHeterodyne

# SCUBA-2
class:		orac.jcmt.inst.SpInstSCUBA2
editor:		ot.jcmt.inst.editor.EdCompInstSCUBA2

# FTS-2 Obs
class:		orac.jcmt.iter.SpIterFTS2Obs
editor:		ot.jcmt.iter.editor.EdIterFTS2Obs
img feature:	ot.jcmt.tpe.TpeReferenceArcFeature

# Focus Obs Iterator
class:		orac.jcmt.iter.SpIterFocusObs
editor:		ot.jcmt.iter.editor.EdIterFocusObs

# Jiggle Obs Iterator
class:		orac.jcmt.iter.SpIterJiggleObs
editor:		ot.jcmt.iter.editor.EdIterJiggleObs

# Pointing Obs Iterator
class:		orac.jcmt.iter.SpIterPointingObs
editor:		ot.jcmt.iter.editor.EdIterPointingObs

# Raster Obs Iterator
class:		orac.jcmt.iter.SpIterRasterObs
editor:		ot.jcmt.iter.editor.EdIterRasterObs
img feature:	ot.jcmt.tpe.TpeScanAreaFeature

# Raster TPE
tpe feature:    ot.jcmt.tpe.TpeScanAreaFeature
tpe type:       independent

# Skydip Obs Iterator  	 
class:          orac.jcmt.iter.SpIterSkydipObs 	 
editor:         ot.jcmt.iter.editor.EdIterSkydipObs

# Setup Obs Iterator
#class:          orac.jcmt.iter.SpIterSetupObs
#editor:         ot.jcmt.iter.editor.EdIterSetupObs

# Stare Obs Iterator
class:		orac.jcmt.iter.SpIterStareObs
editor:		ot.jcmt.iter.editor.EdIterStareObs

# Noise Obs Iterator
class:		orac.jcmt.iter.SpIterNoiseObs
editor:		ot.jcmt.iter.editor.EdIterNoiseObs

# Flat field Iterator  	 
class:          orac.jcmt.iter.SpIterFlatObs
editor:         ot.jcmt.iter.editor.EdIterFlatObs

# Array Test Iterator
class:          orac.jcmt.iter.SpIterArrayTestObs
editor:         ot.jcmt.iter.editor.EdIterArrayTestObs

# POL Config Iterator  	 
class:          orac.jcmt.iter.SpIterPOL 	 
editor:         ot.jcmt.iter.editor.EdIterGenericConfig

# DREAM Iterator
#class:          orac.jcmt.iter.SpIterDREAMObs
#editor:         ot.jcmt.iter.editor.EdIterDREAMObs

# Chop Iterator
class:		gemini.sp.iter.SpIterChop
editor:		jsky.app.ot.editor.EdIterChop
img feature:	ot.jcmt.tpe.TpeJcmtChopFeature

# Micro Step Iterator
class:		gemini.sp.iter.SpIterMicroStep
editor:		ot.jcmt.iter.editor.EdIterMicroStep

# JCMT libraries
library:        ACSIS, SCUBA2

# Telescope utility class for JCMT
telescope util: orac.jcmt.util.JcmtUtil

# Chop defaults: throw, angle, system
# system should be one of the chop systems defined in
# orac.jcmt.SpJCMTConstants.CHOP_SYSTEMS (case sensitive).
chop defaults: 60, 90, AZEL

# Targets which are known by the TCS by name, e.g. planets.
named targets: Sun, Mercury, Venus, Moon, Mars, Jupiter, Saturn, Uranus, Neptune, Pluto

# Latitude of telescope (JCMT)
telescope latitude: 19:49:20.75

#ProxyServer info
Proxy Server: 
Proxy Port: 

# Observer note entry fields
Labels: Completion Parameter, Binning
Tags: completionParameter, binning
Examples: (S/N = 5 / allocatedtime expires / mK / mJy), (specify units of MHz or Km/s for Heterodyne)

schemaURL: http://omp.jach.hawaii.edu/schema/TOML

schemaBase: JAC/JCMT/JCMT.xsd
